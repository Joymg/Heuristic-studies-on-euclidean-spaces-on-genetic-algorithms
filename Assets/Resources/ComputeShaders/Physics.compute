// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel LineCollides

struct Obstacle
{
    float2 a;
    float2 b;
    float2 c;
    float2 d;
};

struct Line
{
    float2 u;
    float2 v;
};


//Controller Data
int num_movements;
int num_agents;
int num_obstacle;


RWStructuredBuffer<Line> agentsPathLines;
RWStructuredBuffer<float2> collisionPoints;

RWStructuredBuffer<float2> lastAgentValidPosition;
RWStructuredBuffer<Obstacle> obstacles;

RWStructuredBuffer<int> hasAgentCrashed;
RWStructuredBuffer<int> indexOfFirstCollision;


// returns true if the two lines intersect, and populates the collision point.
// http://www.jeffreythompson.org/collision-detection/line-line.php
bool _lineLine(float2 a1, float2 a2, float2 b1, float2 b2, out float2 collision)
{
    // calculate the distance to intersection point
    float uA = ((b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x)) / ((b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y));
    float uB = ((a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x)) / ((b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y));

    // if uA and uB are between 0-1, lines are colliding
    bool hit = uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1;
    collision = hit ? float2(a1.x + (uA * (a2.x - a1.x)), a1.y + (uA * (a2.y - a1.y))) : float2(0, 0);
        
    return hit;
}

// returns true if the line intersects the rect, and populates the collision point. 
// http://www.jeffreythompson.org/collision-detection/line-rect.php
bool _lineRect(float2 u, float2 v, float2 a, float2 b, float2 c, float2 d, out float2 collision)
{
    bool left = _lineLine(u, v, a, b, collision);
    if (left)
        return true;
    bool right = _lineLine(u, v, b, c, collision);
    if (right)
        return true;
    bool top = _lineLine(u, v, c, d, collision);
    if (top)
        return true;
    bool bottom = _lineLine(u, v, d, a, collision);
    if (bottom)
        return true;

    return false;
}

// returns true if the line intersects the rect, and populates the collision point. 
// http://www.jeffreythompson.org/collision-detection/line-rect.php
bool _lineRect(Line l, Obstacle o, out float2 collision)
{
    bool left = _lineLine(l.u, l.v, o.a, o.b, collision);
    if (left)
        return true;
    bool right = _lineLine(l.u, l.v, o.b, o.c, collision);
    if (right)
        return true;
    bool top = _lineLine(l.u, l.v, o.c, o.d, collision);
    if (top)
        return true;
    bool bottom = _lineLine(l.u, l.v, o.d, o.a, collision);
    if (bottom)
        return true;

    return false;
}

// returns true if the line intersects the rect, and populates the collision point. 
// http://www.jeffreythompson.org/collision-detection/line-rect.php
bool _lineRectCloser(Line l, Obstacle o, out float2 collision)
{
    float2 collisions[4];
    bool left = _lineLine(l.u, l.v, o.a, o.b, collisions[0]);
    bool right = _lineLine(l.u, l.v, o.b, o.c, collisions[1]);
    bool top = _lineLine(l.u, l.v, o.c, o.d, collisions[2]);
    bool bottom = _lineLine(l.u, l.v, o.d, o.a, collisions[3]);
    
    int index = 0;
    float minDist = 1.0 / 0.0;
    for (int i = 0; i < 4; i++)
    {
        float dist = distance(l.u, collisions[i]);
        if (minDist > dist)
        {
            minDist = dist;
            index = i;

        }
    }
    collision = collisions[index];

    return left || right || top || bottom;
}

[numthreads(8, 8, 1)]
void LineCollides(uint3 id : SV_DispatchThreadID)
{
    //x -> Agents, y -> movements, z -> Obstacles
    
    if ((int) id.x < num_agents && (int) id.y < num_movements && (int) id.z < num_obstacle * 4)
    {
        int currentAgentLineIndex = (int) id.x * num_movements + (int) id.y;
        bool intersects = _lineRectCloser(
        agentsPathLines[currentAgentLineIndex],
        obstacles[id.z],
        collisionPoints[id.x]);
        //bool intersects = _lineRect(lineA[id.x], lineB[id.x], obstacle[id.x].a, obstacle[id.x].b, obstacle[id.x].c, obstacle[id.x].d, collision);
        
        bool hasIntersected = ((hasAgentCrashed[id.x] == 1) || intersects) ? true : false;
        
        hasAgentCrashed[id.x] = hasIntersected ? 1 : 0;
        
        bool improves = (int) id.y < indexOfFirstCollision[id.x];
        
        indexOfFirstCollision[id.x] = intersects && improves ? id.y : indexOfFirstCollision[id.x];
        
        lastAgentValidPosition[id.x] = hasAgentCrashed[id.x] == 1 && improves ? collisionPoints[id.x] : lastAgentValidPosition[id.x];
        
    }
}

