// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel LineCollides

struct Obstacle
{
    float2 x;
    float2 y;
    float2 z;
    float2 w;
};

RWStructuredBuffer<int> collides;
RWStructuredBuffer<Obstacle> obstacle;
RWStructuredBuffer<float2> lineA;
RWStructuredBuffer<float2> lineB;

// returns true if the two lines intersect, and populates the collision point.
// http://www.jeffreythompson.org/collision-detection/line-line.php
bool _lineLine(float2 a1, float2 a2, float2 b1, float2 b2, out float2 collision)
{
    // calculate the distance to intersection point
    float uA = ((b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x)) / ((b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y));
    float uB = ((a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x)) / ((b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y));

    // if uA and uB are between 0-1, lines are colliding
    bool hit = uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1;
    if (hit)
        collision = float2(a1.x + (uA * (b1.x - a1.x)), a1.y + (uA * (b1.y - a1.y)));
    return hit;
}

// returns true if the line intersects the rect, and populates the collision point. 
// http://www.jeffreythompson.org/collision-detection/line-rect.php
bool _lineRect(float2 u, float2 v, float2 a, float2 b, float2 c, float2 d, out float2 collision)
{
    bool left = _lineLine(u, v, a, b, collision);
    if (left)
        return true;
    bool right = _lineLine(u, v, b, c, collision);
    if (right)
        return true;
    bool top = _lineLine(u, v, c, d, collision);
    if (top)
        return true;
    bool bottom = _lineLine(u, v, d, a, collision);
    if (bottom)
        return true;

    return false;
}

[numthreads(8, 8, 1)]
void LineCollides(uint3 id : SV_DispatchThreadID)
{

    float2 collision;
    if (_lineRect(lineA[id.x], lineB[id.x], obstacle[id.x].x, obstacle[id.x].y, obstacle[id.x].z, obstacle[id.x].w, collision))
    {
        collides[id.x] = 1;
    }
    
 
}
